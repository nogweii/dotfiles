# vim: set ft=gitconfig:

[github]
    user = nogweii
[user]
    name = Nogweii
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
[apply]
    whitespace = fix
[color]
    branch = auto
    diff = auto
    status = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[core]
    excludesfile = ~/dotfiles/config/git/ignores
    attributesfile = ~/dotfiles/config/git/attributes
[branch]
    autosetuprebase = always
    sort = -committerdate
[web]
    browser = kde-open
[browser "kde-open"]
    cmd = kde-open
[push]
    default = current
[help]
    autocorrect = 1
[url "ssh://git@code.aether.earth:22792/"]
    insteadOf = https://code.aether.earth/
[merge "merge-changelog"]
    name = GNU-style ChangeLog merge driver
    driver = /usr/share/gnulib/modules/git-merge-changelog %O %A %B
[merge]
    tool = fugitive
    keepBackup = false
[mergetool "fugitive"]
    cmd = nvim -c \"Gvdiffsplit!\" \"$MERGED\"
[mergetool "sops"]
    cmd = sops-mergetool.sh "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
[status]
    submodulesummary = true
[pack]
    threads = 0
[init]
    templatedir = ~/dotfiles/config/git/template
    defaultBranch = main
[diff]
    submodule = diff
[advice]
    pushNonFastForward = false
    statusHints = true
    commitBeforeMerge = false
    resolveConflict = false
    implicitIdentity = false
    detachedHead = false
[pull]
    rebase = true
[diff "ansible-vault"]
    textconv = ansible-vault view
[log]
    mailmap = true
[mergetool]
    prompt = false
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[maintenance]
    strategy = incremental

[include]
    path = maintenance_repos.conf

[alias]
    # quick shortcut for add
    a = add
    # quick shortcut for diff
    d = diff -w
    # quick shortcut for branch
    br = branch
    # quick shortcut for status, using the short codes without any helper
    # messages
    st = status -sb
    # quick shortcut for checkout
    co = checkout
    # quick shortcut for push
    pu = push
    # quick shortcut for force push
    fpu = push --force-with-lease
    # quick shortcut for pull
    pl = pull
    # quick shortcut for commit, but also shows the diff in the commit message
    ci = commit -v
    # Easy amending of commit messages
    ca = commit -v --amend -c HEAD
    # Easily create a new branch based off mater
    cb = "!f() { git checkout -b $1 $(git default-branch); }; f"
    # show a log of changes that haven't been pushed upstream yet.
    unpushed = log origin..HEAD
    # pretty log
    lg = log --decorate --graph --pretty=format:'%Cred%h%Creset - %C(blue)%aN%Creset:%C(yellow)%d%Creset %s %Cgreen(%ar)%Creset' --abbrev-commit --date=relative
    # show all the files that are ignored
    ls-ignored = ls-files --others -i --exclude-standard
    # show the changes that are pulled in (calls `git pull` as well)
    up = !"git pull && git log --pretty=format:'%Cred%ae %Creset- %C(yellow)%s %Creset(%ar)' HEAD@{1}.."
    # find all empty directories, add a file within them, and commit it
    keep = !"find . ( -type d -empty ) -and ( -not -regex ./.git.* ) -exec touch {}/.gitkeep ; ; git commit -am 'Keep all directories'"
    # reset all of HEAD, or just the 1 file (passed as a parameter)
    diff-reset = !"git diff -R $1 | patch -up1 -i-"
    # Initializes & updates all submodules
    subup = submodule update --init --recursive
    # Push all submodules to origin master
    subpush = submodule foreach "git push origin master"
    # Pull submodules from origin master
    subpull = submodule foreach "git pull origin master"
    # Delete a submodule
    subrm = !cd ${GIT_PREFIX:-.} && git submodule deinit --force $1 && git rm --force $1
    # A list of the environment variables git sets (+ any it inherits)
    env = !env
    # Execute a command relative to the root of the repository. (Non-shell git
    # aliases are executed in the current directory, no matter where that may
    # be)
    exec = !exec
    # A pretty tree which shows the branch's relationships to each other
    branch-tree = log --graph --simplify-by-decoration --pretty=format:'%d' --all
    # This a well-known SHA1, which is useful for various scripting stuffs
    empty-tree-sha1 = hash-object -t tree /dev/null
    # Find any trailing whitespace (the SHA? It's the empty tree SHA!)
    whitespace = diff --check 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    # Create a patch that creates a position of your working tree; a poor man's
    # squash (though useful for mailing lists)
    diff-slice = diff -p 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    # A stupid-simple git serving daemon (see git-exec for the trick with !git
    # aliases)
    simple-serve = !git daemon --reuseaddr --verbose --base-path=. --export-all ./.git
    # Edit every file that hasn't been merged in your $EDITOR
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f` +/======"
    # Add every file that hasn't been merged
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
    # Generate a graphviz directed graph of the history
    graphviz = "!f() { echo 'digraph git {\n' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '\n}'; }; f"
    # Delete a branch from the remote
    push-deleted-branch = "!f() { [[ -z $2 ]] && git push origin \":${1}\" || git push $1 \":${2}\" }; f"
    # This is funny to me, I like keeping the same commit message for this file
    commit-vim-vocab = "!git add config/nvim/spell/en.utf-8.add && git commit -m 'More vocabulary!'"
    # This is also funny to me, I like keeping the same commit message for this file
    commit-nvim-plugins = "!git add config/nvim/lazy-lock.json && git commit -m 'Update neovim plugins.'"
    # Clone only the latest commit, to minimize the download size (and therefore increase speed)
    shallow-clone = clone --depth=1
    # Lazy git initialization with initial commit
    lazy-init = "!git init . && git add . && git commit -m 'Initial commit'"
    # Push everything, including tags
    push-all = "!git push --all && git push --tags"
    # Rapidly add a file to the previous commit that I forgot from before
    cazz = "!f() { git add $1 && git commit --amend -c HEAD --allow-empty-message \"\" }; f"
    # Sometimes, we don't want to complain, but instead celebrate someone's work
    praise = blame
    # Word-based diff
    wd = diff --word-diff=color
    # Find 10 most recent branches that have had commits
    recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
    # All of my commits done today
    today = !git lg --since=00:00:00 --all --no-merges  --author=colin@evaryont.me
    # Get the latest tag in the repo
    latest-tag = describe --tags --abbrev=0
    # Checkout the latest tag in every submodule
    subtag = "!git submodule foreach git fetch --tags && git submodule foreach 'git checkout `git latest-tag`'"
    # Reset the local state of a submodule. (Useful for backing out of changes)
    subreset = "!f() { git submodule deinit --force $1 && git subup $1; }; f"
    # delete all files that are ignored by git
    rm-ignored = "!rm -v $(git ls-files --others -i --exclude-standard)"
    # show the remote url for the current branch
    remote-url = "!git ls-remote --get-url $(git for-each-ref --format='%(upstream:remotename)' $(git symbolic-ref -q HEAD))"
    # list all branches that have been merged
    merged-branches = "!f() { branch=${1:-$(git default-branch)}; eval \"git branch --merged $branch | egrep -v '^(. )?$branch$' | sed 's/^. //'\"; }; f"
    # create an orphaned branch, empty and disconnected from the repo's history
    ob = "!f() { git checkout --orphan $1 && git rm --quiet -r --cached .; }; f"
    # locally delete all branches that have been merged into the default branch already
    branch-cleanup = "!f() { git branch --merged $(git default-branch) | egrep -v '\\*? $(git default-branch)' | xargs -n 1 git branch -d ;}; f"
    # Find the nearest parent branch from the current HEAD. This is very naÃ¯ve!
    parent-branch = "!f() { git log --pretty=format:'%D' HEAD^ | grep 'origin/' | head -n1 | sed 's@origin/@@' | sed 's@,.*@@' ;}; f"
    # Set the branch's upstream to origin remote with the exact same branch name
    branch-upstream-to-origin = "!f() { git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD) ;}; f"
    # find what branch origin's HEAD points to, presuming it's the default/primary branch
    default-branch = "!f() { git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@' ;}; f"
    # generate a mailmap file with all of the committer's emails
    gen-mailmap = "!f() { git shortlog -se | awk -F'\t' '{print $2,$3}' | sort >> .mailmap ;}; f"
    # update a remote and prune local branches to match
    rem-up = "!f() { git remote update $1 && git remote prune $1 ;}; f"
    # print all of the files that have a gitattribute set
    all-attributes=!git ls-files | git check-attr --stdin -a
    # register a repo to be monitored by the scheduled git jobs (see git-maintenance(8) for details)
    maint-reg=!git maintenance register --config-file=$HOME/dotfiles/config/git/maintenance_repos.conf
    # unregister a repo, so it's no longer monitored by scheduled git jobs
    maint-unreg=!git maintenance unregister --config-file=$HOME/dotfiles/config/git/maintenance_repos.conf

[column]
    ui = auto
