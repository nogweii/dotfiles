#!/usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'down'
end

require 'down'
require 'json'

glyphnames_url = 'https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/glyphnames.json'
Down.download(glyphnames_url, destination: 'glyphnames.json')
all_glyphs = JSON.parse(File.read('glyphnames.json'))

all_glyphs.delete('METADATA')

codepoints = []

all_glyphs.each do |name, details|
  codepoints << details['code'].to_i(16)
end

codepoints.sort!

pre_length = codepoints.length

codepoints.uniq!

post_length = codepoints.length

puts "length diff: #{pre_length - post_length}"

# inspiration from https://codereview.stackexchange.com/a/90074,
# but lazily copied from https://www.rubysos.com/std-lib/how-to-compress-arrays-of-integers-into-an-array-of-ranges-and-integers-in-ruby/

def compress_array(array)
  compressed_array = []
  start_range = nil
  end_range = nil

  array.each_with_index do |num, index|
    if start_range.nil?
      start_range = num
      end_range = num
    elsif num == end_range + 1
      end_range = num
    else
      if start_range == end_range
        compressed_array << start_range
      else
        compressed_array << (start_range..end_range)
      end

      start_range = num
      end_range = num
    end

    if index == array.length - 1
      if start_range == end_range
        compressed_array << start_range
      else
        compressed_array << (start_range..end_range)
      end
    end
  end

  compressed_array
end

codepoint_ranges = compress_array(codepoints)

# symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

File.open('nerd_font_symbol_map.conf', 'w') do |f|
  f.puts "#: This file is generated by ./gen_nerd_font_symbol_map.rb\n"
  f.print "symbol_map "
  f.print (codepoint_ranges.map do |range|
    if range.is_a?(Range)
      "U+#{range.first.to_s(16).upcase}-U+#{range.last.to_s(16).upcase}"
    else
      "U+#{range.to_s(16).upcase}"
    end
  end.join(','))

  f.puts " Symbols Nerd Font Mono"
end

puts "Updated nerd_font_symbol_map.conf"
